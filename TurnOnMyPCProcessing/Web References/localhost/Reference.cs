//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18033.
// 
#pragma warning disable 1591

namespace TurnOnMyPCProcessing.localhost {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebServiceSoap", Namespace="http://us.demo.eleks.com/TurnOnMyPC")]
    public partial class WebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetMacsToTurnOnOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveMacFromQueueOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDataOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebService() {
            this.Url = global::TurnOnMyPCProcessing.Settings.Default.TurnOnMyPCProcessing_localhost_WebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetMacsToTurnOnCompletedEventHandler GetMacsToTurnOnCompleted;
        
        /// <remarks/>
        public event RemoveMacFromQueueCompletedEventHandler RemoveMacFromQueueCompleted;
        
        /// <remarks/>
        public event UpdateDataCompletedEventHandler UpdateDataCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://us.demo.eleks.com/TurnOnMyPC/GetMacsToTurnOn", RequestNamespace="http://us.demo.eleks.com/TurnOnMyPC", ResponseNamespace="http://us.demo.eleks.com/TurnOnMyPC", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetMacsToTurnOn(string userName, string password) {
            object[] results = this.Invoke("GetMacsToTurnOn", new object[] {
                        userName,
                        password});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMacsToTurnOnAsync(string userName, string password) {
            this.GetMacsToTurnOnAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void GetMacsToTurnOnAsync(string userName, string password, object userState) {
            if ((this.GetMacsToTurnOnOperationCompleted == null)) {
                this.GetMacsToTurnOnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMacsToTurnOnOperationCompleted);
            }
            this.InvokeAsync("GetMacsToTurnOn", new object[] {
                        userName,
                        password}, this.GetMacsToTurnOnOperationCompleted, userState);
        }
        
        private void OnGetMacsToTurnOnOperationCompleted(object arg) {
            if ((this.GetMacsToTurnOnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMacsToTurnOnCompleted(this, new GetMacsToTurnOnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://us.demo.eleks.com/TurnOnMyPC/RemoveMacFromQueue", RequestNamespace="http://us.demo.eleks.com/TurnOnMyPC", ResponseNamespace="http://us.demo.eleks.com/TurnOnMyPC", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveMacFromQueue(string userName, string password, string mac) {
            this.Invoke("RemoveMacFromQueue", new object[] {
                        userName,
                        password,
                        mac});
        }
        
        /// <remarks/>
        public void RemoveMacFromQueueAsync(string userName, string password, string mac) {
            this.RemoveMacFromQueueAsync(userName, password, mac, null);
        }
        
        /// <remarks/>
        public void RemoveMacFromQueueAsync(string userName, string password, string mac, object userState) {
            if ((this.RemoveMacFromQueueOperationCompleted == null)) {
                this.RemoveMacFromQueueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveMacFromQueueOperationCompleted);
            }
            this.InvokeAsync("RemoveMacFromQueue", new object[] {
                        userName,
                        password,
                        mac}, this.RemoveMacFromQueueOperationCompleted, userState);
        }
        
        private void OnRemoveMacFromQueueOperationCompleted(object arg) {
            if ((this.RemoveMacFromQueueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveMacFromQueueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://us.demo.eleks.com/TurnOnMyPC/UpdateData", RequestNamespace="http://us.demo.eleks.com/TurnOnMyPC", ResponseNamespace="http://us.demo.eleks.com/TurnOnMyPC", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateData(string userName, string password, UserPCInfo[] data) {
            object[] results = this.Invoke("UpdateData", new object[] {
                        userName,
                        password,
                        data});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDataAsync(string userName, string password, UserPCInfo[] data) {
            this.UpdateDataAsync(userName, password, data, null);
        }
        
        /// <remarks/>
        public void UpdateDataAsync(string userName, string password, UserPCInfo[] data, object userState) {
            if ((this.UpdateDataOperationCompleted == null)) {
                this.UpdateDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDataOperationCompleted);
            }
            this.InvokeAsync("UpdateData", new object[] {
                        userName,
                        password,
                        data}, this.UpdateDataOperationCompleted, userState);
        }
        
        private void OnUpdateDataOperationCompleted(object arg) {
            if ((this.UpdateDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDataCompleted(this, new UpdateDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18033")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://us.demo.eleks.com/TurnOnMyPC")]
    public partial class UserPCInfo {
        
        private string pCNameField;
        
        private string pCMacAddressField;
        
        private PCState stateField;
        
        /// <remarks/>
        public string PCName {
            get {
                return this.pCNameField;
            }
            set {
                this.pCNameField = value;
            }
        }
        
        /// <remarks/>
        public string PCMacAddress {
            get {
                return this.pCMacAddressField;
            }
            set {
                this.pCMacAddressField = value;
            }
        }
        
        /// <remarks/>
        public PCState State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18033")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://us.demo.eleks.com/TurnOnMyPC")]
    public enum PCState {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        On,
        
        /// <remarks/>
        Off,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMacsToTurnOnCompletedEventHandler(object sender, GetMacsToTurnOnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMacsToTurnOnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMacsToTurnOnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void RemoveMacFromQueueCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateDataCompletedEventHandler(object sender, UpdateDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591